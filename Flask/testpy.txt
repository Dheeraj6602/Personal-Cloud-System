

def login():
    email = request.form.get('loginEmail')
    password = request.form.get('loginPassword')

    conn = sqlite3.connect('cloud_storage.db')
    c = conn.cursor()
    print("The details are: ", email, password)
    c.execute("SELECT * FROM Users WHERE email=? ", (email,))
    user = c.fetchone()
    print("user: ", user)

    if user and check_password(user[3], password):
        return render_template("home.html")  # User exists and password matches
    else:
        flash("Invalid email or password. Please try again.", "error")  # User does not exist or password is incorrect
        return render_template("index.html", show_alert_user_does_not_exist=True)
        #return load_index_page()

@app.route('/register', methods=['POST'])
def register():
    username = request.form.get('username')
    email = request.form.get('email')
    password = request.form.get('password')

    # Hash the password before storing it
    password_hash = hash_password(password)
    print("The details are: ", email, password, username)

    # Connect to the database
    conn = sqlite3.connect('cloud_storage.db')
    c = conn.cursor()

    # Check if email is already registered
    c.execute("SELECT * FROM Users WHERE email=?", (email,))
    existing_user = c.fetchone()
    if existing_user:
        conn.close()
        flash("User with this email already exists. Please use a different email.")
        return load_home_page()
    else:
        # Insert user into database
        # Insert the user into the database
        c.execute("INSERT INTO Users (username, email, password_hash) VALUES (?, ?, ?)", (username, email, password_hash))

        # Commit changes and close connection
        conn.commit()
        conn.close()
        flash("Registration successful! Please log in.", "success")
        return render_template("index.html", show_alert_account_created=True)

def hash_password(password):
    hashed_password = bcrypt.generate_password_hash(password).decode('utf-8')
    return hashed_password

def check_password(hashed_password, user_password):
    return bcrypt.check_password_hash(hashed_password, user_password)